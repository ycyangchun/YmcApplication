package com.allydata.ymc.ymcapplication.excption;import android.content.Context;import com.allydata.ymc.ymcapplication.path.Path;import java.io.BufferedWriter;import java.io.File;import java.io.FileWriter;import java.io.PrintWriter;import java.io.StringWriter;import java.io.Writer;import java.lang.Thread.UncaughtExceptionHandler;import java.text.SimpleDateFormat;import java.util.Date;/** * Exception caught class *  * @author ltyhome ltyhome@yahoo.com.hk *  *         Dec 11, 201311:28:19 AM */public class EmergencyHandler implements UncaughtExceptionHandler {	private static final EmergencyHandler instance = new EmergencyHandler();	private static final SimpleDateFormat SDF = new SimpleDateFormat(			"yyyy年MM月dd日 HH时mm分ss秒 E ");// 格式化时间	private static UncaughtExceptionHandler system;	private static Path path;	private EmergencyHandler() {	}	@Override	public void uncaughtException(final Thread thread, final Throwable ex) {		processException(ex);		system.uncaughtException(thread, ex);	}	private void processException(final Throwable th) {		try {			final String timestamp = SDF.format(new Date());			final Writer result = new StringWriter();			final PrintWriter printWriter = new PrintWriter(result);			th.printStackTrace(printWriter);			final String stacktrace = result.toString();			printWriter.close();			final String filename = path.getExlogPath() + File.separator					+ Path.APP_PACKAGE + "." + Path.APP_VERSION + "."					+ timestamp + ".stacktrace";			writeToFile(stacktrace, filename);		} catch (final Exception e) {			e.printStackTrace();		}	}	private void writeToFile(final String stacktrace, final String filename) {		try {			final BufferedWriter bos = new BufferedWriter(new FileWriter(					filename));			bos.write(stacktrace);			bos.flush();			bos.close();		} catch (final Exception e) {			e.printStackTrace();		}	}	public static void init(final Context context) {		path = Path.getInstance(context, Path.ROOT_NAME);		system = Thread.getDefaultUncaughtExceptionHandler();		Thread.setDefaultUncaughtExceptionHandler(instance);	}	public static void onUnexpectedError(final Throwable th) {		instance.processException(th);	}}